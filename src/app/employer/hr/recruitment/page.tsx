"use client";

import Link from "next/link";
import { useState, useEffect } from "react";
import GovernmentEmployeeQuestionnaire from "@/components/GovernmentEmployeeQuestionnaire";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";

interface RecruitmentData {
  stats: {
    totalApplications: number;
    newApplications: number;
    interviewApplications: number;
    successfulApplications: number;
  };
  applications: {
    id: string;
    cvId: string | null;
    name: string;
    position: string;
    department: string;
    status: string;
    date: string;
    score: number;
  }[];
  jobs: {
    id: string;
    title: string;
    department: string;
    applicants: number;
    status: string;
    deadline: string;
  }[];
  departments: {
    id: string;
    name: string;
    code: string;
  }[];
}

export default function RecruitmentPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState("overview");
  const [selectedStatus, setSelectedStatus] = useState("all");
  const [showQuestionnaire, setShowQuestionnaire] = useState(false);
  const [recruitmentData, setRecruitmentData] = useState<RecruitmentData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [departmentFilter, setDepartmentFilter] = useState("");

  useEffect(() => {
    if (status === "loading") return;
    
    if (!session) {
      router.push("/employer/login");
      return;
    }
    
    fetchRecruitmentData();
  }, [session, status, router]);

  const fetchRecruitmentData = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/hr/recruitment');
      
      if (!response.ok) {
        throw new Error('”®–≥”©–≥–¥”©–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
      }
      
      const data = await response.json();
      setRecruitmentData(data);
      setError(null);
    } catch (err) {
      console.error('Recruitment data fetch error:', err);
      setError(err instanceof Error ? err.message : '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
    } finally {
      setLoading(false);
    }
  };

  const getStatusDisplayName = (status: string) => {
    switch (status) {
      case 'PENDING': return '–®–∏–Ω—ç';
      case 'EMPLOYER_APPROVED': return '–Ø—Ä–∏–ª—Ü–ª–∞–≥–∞';
      case 'ADMIN_APPROVED': return '–ê–¥–º–∏–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω';
      case 'APPROVED': return '–ê–º–∂–∏–ª—Ç—Ç–∞–π';
      case 'REJECTED': return '–¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω';
      default: return status;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PENDING': return 'bg-blue-100 text-blue-800';
      case 'EMPLOYER_APPROVED': return 'bg-purple-100 text-purple-800';
      case 'ADMIN_APPROVED': return 'bg-yellow-100 text-yellow-800';
      case 'APPROVED': return 'bg-green-100 text-green-800';
      case 'REJECTED': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredApplications = recruitmentData?.applications.filter(app => {
    const matchesSearch = 
      app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.position.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.department.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = selectedStatus === 'all' || app.status === selectedStatus;
    const matchesDepartment = departmentFilter === '' || app.department === departmentFilter;
    
    return matchesSearch && matchesStatus && matchesDepartment;
  }) || [];

  const recruitmentStages = [
    { 
      stage: "1. –ê–Ω–∫–µ—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö, –∞–Ω–≥–∏–ª–∞—Ö", 
      count: recruitmentData?.stats.totalApplications || 0, 
      color: "bg-blue-500", 
      description: "–ò—Ä—Å—ç–Ω –∞–Ω–∫–µ—Ç—É—É–¥—ã–≥ —Å–∏—Å—Ç–µ–º–¥ –±“Ø—Ä—Ç–≥—ç–Ω—ç",
      subSteps: [
        "–ò—Ä—Å—ç–Ω –∞–Ω–∫–µ—Ç—É—É–¥—ã–≥ —Å–∏—Å—Ç–µ–º–¥ –±“Ø—Ä—Ç–≥—ç–Ω—ç",
        "–ê–Ω–∫–µ—Ç—ã–≥ –∞–Ω–≥–∏–ª–∞—Ö:",
        "‚Ä¢ –®–∞–∞—Ä–¥–ª–∞–≥–∞ —Ö–∞–Ω–≥–∞—Å–∞–Ω",
        "‚Ä¢ –•–∞–Ω–≥–∞–∞–≥“Ø–π", 
        "‚Ä¢ –ù”©”©—Ü”©–Ω–¥ –±“Ø—Ä—Ç–≥—ç—Ö"
      ]
    },
    { 
      stage: "2. –ì–æ–ª —è—Ä–∏–ª—Ü–ª–∞–≥—ã–Ω —à–∞—Ç", 
      count: recruitmentData?.stats.interviewApplications || 0, 
      color: "bg-purple-500", 
      description: "–•—ç–ª—Ç—Å–∏–π–Ω –¥–∞—Ä–≥–∞, –•–ù-–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω, —É–¥–∏—Ä–¥–ª–∞–≥—ã–Ω –±–∞–≥ –æ—Ä–æ–ª—Ü–æ–Ω–æ",
      subSteps: [
        "–•—ç–ª—Ç—Å–∏–π–Ω –¥–∞—Ä–≥–∞, –•–ù-–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω, —É–¥–∏—Ä–¥–ª–∞–≥—ã–Ω –±–∞–≥ –æ—Ä–æ–ª—Ü–æ–Ω–æ",
        "–ê—Å—É—É–ª—Ç—É—É–¥:",
        "‚Ä¢ –£—Ä —á–∞–¥–≤–∞—Ä, —Ç—É—Ä—à–ª–∞–≥—ã–Ω —Ç–∞–ª–∞–∞—Ä",
        "‚Ä¢ –ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Å–æ—ë–ª–¥ –Ω–∏–π—Ü—ç—Ö —ç—Å—ç—Ö",
        "‚Ä¢ –°—ç—Ç–≥—ç–ª–≥—ç—ç, —Ö–∞—Ä–∏–ª—Ü–∞–∞–Ω—ã —É—Ä —á–∞–¥–≤–∞—Ä"
      ]
    },
    { 
      stage: "3. –®–∞–ª–≥–∞—Ä—Å–∞–Ω –Ω—ç—Ä –¥—ç–≤—à–∏–≥—á–¥–∏–π–Ω –±–∞—Ä–∏–º—Ç –±–∏—á–∏–≥ —à–∞–ª–≥–∞—Ö", 
      count: Math.floor((recruitmentData?.stats.totalApplications || 0) * 0.3), 
      color: "bg-yellow-500", 
      description: "–î–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, ”©–º–Ω”©—Ö –∞–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç",
      subSteps: [
        "–î–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, ”©–º–Ω”©—Ö –∞–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç",
        "–•—É–≤–∏–π–Ω “Ø–Ω—ç–º–ª—ç—Ö, –ª–∞–≤–ª–∞–≥–∞–∞ (Reference) –∑—ç—Ä–≥–∏–π–≥ —à–∞–ª–≥–∞—Ö"
      ]
    },
    { 
      stage: "4. –ì—ç—Ä—ç—ç –±–∞–π–≥—É—É–ª–∞—Ö", 
      count: recruitmentData?.stats.successfulApplications || 0, 
      color: "bg-green-500", 
      description: "–•”©–¥”©–ª–º”©—Ä–∏–π–Ω –≥—ç—Ä—ç—ç –±–∞–π–≥—É—É–ª–∞—Ö",
      subSteps: [
        "–•”©–¥”©–ª–º”©—Ä–∏–π–Ω –≥—ç—Ä—ç—ç –±–∞–π–≥—É—É–ª–∞—Ö",
        "–ù—É—É—Ü–ª–∞–ª—ã–Ω –≥—ç—Ä—ç—ç, –¥–æ—Ç–æ–æ–¥ –∂—É—Ä–∞–º, –∞—é—É–ª–≥“Ø–π –∞–∂–∏–ª–ª–∞–≥–∞–∞–Ω—ã –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç –≥–∞—Ä—ã–Ω “Ø—Å—ç–≥ –∑—É—Ä—É—É–ª–∞—Ö"
      ]
    }
  ];

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0C213A]"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-7xl mt-10 mx-auto px-4 py-8">
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <div className="flex items-center">
            <div className="text-red-400">
              <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞</h3>
              <p className="text-sm text-red-700 mt-1">{error}</p>
              <button 
                onClick={fetchRecruitmentData}
                className="mt-2 text-sm text-red-600 hover:text-red-500 underline"
              >
                –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ—Ö
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!recruitmentData) {
    return (
      <div className="max-w-7xl mt-10 mx-auto px-4 py-8">
        <div className="text-center py-12">
          <h3 className="text-lg font-medium text-gray-900">”®–≥”©–≥–¥”©–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π</h3>
          <p className="text-gray-500 mt-1">–ê–∂–∏–ª–¥ –∞–≤–∞—Ö –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π –±–∞–π–Ω–∞.</p>
        </div>
      </div>
    );
  }

  const recruitmentStats = [
    { label: "–ù–∏–π—Ç –∞–Ω–∫–µ—Ç", value: recruitmentData.stats.totalApplications.toString(), change: "+" + recruitmentData.stats.newApplications, color: "text-blue-600", icon: "üìã" },
    { label: "–®–∏–Ω—ç –∞–Ω–∫–µ—Ç", value: recruitmentData.stats.newApplications.toString(), change: "+" + Math.floor(recruitmentData.stats.newApplications * 0.3), color: "text-green-600", icon: "üÜï" },
    { label: "–Ø—Ä–∏–ª—Ü–ª–∞–≥–∞", value: recruitmentData.stats.interviewApplications.toString(), change: "+" + Math.floor(recruitmentData.stats.interviewApplications * 0.2), color: "text-purple-600", icon: "üí¨" },
    { label: "–ê–º–∂–∏–ª—Ç—Ç–∞–π", value: recruitmentData.stats.successfulApplications.toString(), change: "+" + Math.floor(recruitmentData.stats.successfulApplications * 0.1), color: "text-orange-600", icon: "‚úÖ" }
  ];

  return (
    <main className="max-w-7xl mt-10 mx-auto px-4 py-8">
      <div className="mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-[#0C213A] mb-2">–ê–∂–∏–ª–¥ –∞–≤–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å</h1>
            <p className="text-gray-600">–ê–∂–ª—ã–Ω –±–∞–π—Ä–Ω—ã –∑–∞—Ä–ª–∞–ª, –∞–Ω–∫–µ—Ç, —è—Ä–∏–ª—Ü–ª–∞–≥–∞, —Å–æ–Ω–≥–æ–ª—Ç—ã–Ω –ø—Ä–æ—Ü–µ—Å—Å—ã–≥ —É–¥–∏—Ä–¥–∞—Ö</p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {recruitmentStats.map((stat, index) => (
          <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">{stat.label}</p>
                <p className="text-2xl font-bold text-[#0C213A]">{stat.value}</p>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-2xl">{stat.icon}</span>
                <div className={`text-sm font-medium ${stat.color}`}>
                  {stat.change}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: "overview", name: "–•—è–Ω–∞—Ö —Å–∞–º–±–∞—Ä" },
              { id: "applications", name: "–ê–Ω–∫–µ—Ç—É—É–¥" },
              { id: "questionnaire", name: "–¢”©—Ä–∏–π–Ω –∞–ª–±–∞–Ω —Ö–∞–∞–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç" },
              { id: "responses", name: "–ê—Å—É—É–ª–≥—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥" },
              { id: "positions", name: "–ê–∂–ª—ã–Ω –±–∞–π—Ä" }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? "border-[#0C213A] text-[#0C213A]"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                {tab.name}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {activeTab === "overview" && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-[#0C213A]">–°“Ø“Ø–ª–∏–π–Ω –∞–Ω–∫–µ—Ç—É—É–¥</h3>
              <Link href="#" className="text-sm text-[#0C213A] hover:text-[#0C213A]/80">–ë“Ø–≥–¥–∏–π–≥ —Ö–∞—Ä–∞—Ö</Link>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                {recruitmentData.applications.slice(0, 4).map((application) => (
                  <div key={application.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-[#0C213A] text-white rounded-full flex items-center justify-center font-bold">
                        {application.name[0]?.toUpperCase() || '?'}
                      </div>
                      <div>
                        <h4 className="font-medium text-[#0C213A]">{application.name}</h4>
                        <p className="text-sm text-gray-600">{application.position} ‚Ä¢ {application.department}</p>
                        <p className="text-xs text-gray-500">{application.date}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center space-x-2">
                        <span className="text-lg font-bold text-[#0C213A]">{application.score}%</span>
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(application.status)}`}>
                          {getStatusDisplayName(application.status)}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-[#0C213A]">–ê–∂–∏–ª–¥ –∞–≤–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å</h3>
            </div>
            <div className="p-6">
              <div className="space-y-6">
                {recruitmentStages.map((stage, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <div className={`w-6 h-6 rounded-full ${stage.color} flex items-center justify-center text-white text-xs font-bold`}>
                          {index + 1}
                        </div>
                        <div>
                          <h4 className="font-medium text-[#0C213A]">{stage.stage}</h4>
                          <p className="text-sm text-gray-600">{stage.description}</p>
                        </div>
                      </div>
                      <span className="text-lg font-bold text-[#0C213A]">{stage.count}</span>
                    </div>
                    <div className="ml-9">
                      <div className="space-y-1">
                        {stage.subSteps.map((subStep, subIndex) => (
                          <div key={subIndex} className="text-sm text-gray-600 flex items-start">
                            <span className="w-1 h-1 bg-gray-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                            <span>{subStep}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === "applications" && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex flex-col lg:flex-row lg:justify-between lg:items-center gap-4">
              <h3 className="text-lg font-semibold text-[#0C213A]">–ê–Ω–∫–µ—Ç—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç</h3>
              <div className="flex flex-col sm:flex-row gap-3">
                <input
                  type="text"
                  placeholder="–ù—ç—Ä, –∞–ª–±–∞–Ω —Ç—É—à–∞–∞–ª —ç—Å–≤—ç–ª —Ö—ç–ª—Ç—ç—Å—ç—ç—Ä —Ö–∞–π—Ö..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-black-500"
                />
                <select 
                  value={departmentFilter} 
                  onChange={(e) => setDepartmentFilter(e.target.value)}
                  className="border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-black-500"
                >
                  <option value="">–ë“Ø—Ö —Ö—ç–ª—Ç—ç—Å</option>
                  {recruitmentData.departments.map((dept) => (
                    <option key={dept.id} value={dept.name}>
                      {dept.name}
                    </option>
                  ))}
                </select>
                <select 
                  value={selectedStatus} 
                  onChange={(e) => setSelectedStatus(e.target.value)}
                  className="border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-black-500"
                >
                  <option value="all">–ë“Ø–≥–¥</option>
                  <option value="PENDING">–®–∏–Ω—ç</option>
                  <option value="EMPLOYER_APPROVED">–Ø—Ä–∏–ª—Ü–ª–∞–≥–∞</option>
                  <option value="APPROVED">–ê–º–∂–∏–ª—Ç—Ç–∞–π</option>
                  <option value="REJECTED">–¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω</option>
                </select>
                <button 
                  onClick={() => {
                    setSearchTerm('');
                    setDepartmentFilter('');
                    setSelectedStatus('all');
                  }}
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors text-sm"
                >
                  –¶—ç–≤—ç—Ä–ª—ç—Ö
                </button>
              </div>
            </div>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ù—ç—Ä</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–•—ç–ª—Ç—ç—Å</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–Ω–æ–æ</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¢”©–ª”©–≤</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–≥–Ω–æ–æ</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">“Æ–π–ª–¥—ç–ª</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredApplications.length > 0 ? (
                  filteredApplications.map((application) => (
                    <tr key={application.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-[#0C213A]">{application.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{application.position}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{application.department}</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <span className="text-lg font-bold text-[#0C213A] mr-2">{application.score}%</span>
                          <div className="w-16 bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-[#0C213A] h-2 rounded-full" 
                              style={{ width: `${application.score}%` }}
                            ></div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(application.status)}`}>
                          {getStatusDisplayName(application.status)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{application.date}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                        <Link href={`/employer/applications/${application.id}`} className="text-[#0C213A] hover:text-[#0C213A]/80">“Æ–∑—ç—Ö</Link>
                        {application.cvId && (
                          <button 
                            onClick={async () => {
                              try {
                                const response = await fetch(`/api/cv/download?cvId=${application.cvId}`);
                                if (response.ok) {
                                  const blob = await response.blob();
                                  const url = window.URL.createObjectURL(blob);
                                  const a = document.createElement('a');
                                  a.href = url;
                                  a.download = `${application.name}_CV.pdf`;
                                  document.body.appendChild(a);
                                  a.click();
                                  window.URL.revokeObjectURL(url);
                                  document.body.removeChild(a);
                                } else if (response.status === 401) {
                                  alert('–≠—Ä—Ö –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –ù—ç–≤—Ç—Ä—ç—Ö —ç—Ä—Ö—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É.');
                                } else if (response.status === 404) {
                                  alert('CV —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π –±–∞–π–Ω–∞.');
                                } else {
                                  alert('CV —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.');
                                }
                              } catch (error) {
                                console.error('CV download error:', error);
                                alert('CV —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.');
                              }
                            }}
                            className="text-blue-600 hover:text-blue-800 hover:underline"
                            title={`${application.name}-–∏–π–Ω CV —Ç–∞—Ç–∞—Ö`}
                          >
                            CV –¢–∞—Ç–∞—Ö
                          </button>
                        )}
                        <button className="text-gray-500 hover:text-gray-700">–ó–∞—Å–∞—Ö</button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={7} className="px-6 py-8 text-center text-gray-500">
                      –•–∞–π–ª—Ç—ã–Ω –Ω”©—Ö—Ü”©–ª–¥ —Ç–æ—Ö–∏—Ä–æ—Ö –∞–Ω–∫–µ—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {activeTab === "positions" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {recruitmentData.jobs.map((position) => (
            <div key={position.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start mb-4">
                <h4 className="font-semibold text-[#0C213A]">{position.title}</h4>
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                  position.status === "–ò–¥—ç–≤—Ö—Ç—ç–π" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                }`}>
                  {position.status}
                </span>
              </div>
              <div className="space-y-2 text-sm text-gray-600 mb-4">
                <p><span className="font-medium">–•—ç–ª—Ç—ç—Å:</span> {position.department}</p>
                <p><span className="font-medium">–ê–Ω–∫–µ—Ç:</span> {position.applicants} —Ö“Ø–Ω</p>
                <p><span className="font-medium">–î—É—É—Å–∞—Ö —Ö—É–≥–∞—Ü–∞–∞:</span> {position.deadline}</p>
              </div>
              <div className="flex space-x-2">
                <Link 
                  href={`/employer/applications/${position.id}`}
                  className="flex-1 bg-[#0C213A] text-white py-2 px-3 rounded text-sm hover:bg-[#0C213A]/90 transition-colors text-center"
                >
                  –ê–Ω–∫–µ—Ç “Ø–∑—ç—Ö
                </Link>
                <button className="px-3 py-2 border border-gray-300 rounded text-sm hover:bg-gray-50 transition-colors">
                  –ó–∞—Å–∞—Ö
                </button>
              </div>
            </div>
          ))}
          {recruitmentData.jobs.length === 0 && (
            <div className="col-span-full text-center py-12">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">üíº</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">–ê–∂–ª—ã–Ω –±–∞–π—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π</h3>
              <p className="text-gray-600 mb-6">–û–¥–æ–æ–≥–æ–æ—Ä –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –∞–∂–ª—ã–Ω –±–∞–π—Ä –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.</p>
              <Link 
                href="/employer/post-job"
                className="bg-[#0C213A] text-white px-6 py-3 rounded-lg hover:bg-[#0C213A]/90 transition-colors"
              >
                –®–∏–Ω—ç –∞–∂–ª—ã–Ω –±–∞–π—Ä –∑–∞—Ä–ª–∞—Ö
              </Link>
            </div>
          )}
        </div>
      )}

      {activeTab === "questionnaire" && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-[#0C213A]">–¢”©—Ä–∏–π–Ω –∞–ª–±–∞–Ω —Ö–∞–∞–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç</h3>
            <p className="text-sm text-gray-600 mt-1">–¢”©—Ä–∏–π–Ω –∞–ª–±–∞–Ω —Ö–∞–∞–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç –±”©–≥–ª”©—Ö</p>
          </div>
          <div className="p-6">
            {!showQuestionnaire ? (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-[#0C213A]/10 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üìã</span>
                </div>
                <h4 className="text-lg font-medium text-[#0C213A] mb-2">–¢”©—Ä–∏–π–Ω –∞–ª–±–∞–Ω —Ö–∞–∞–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç</h4>
                <p className="text-gray-600 mb-6">–¢”©—Ä–∏–π–Ω –∞–ª–±–∞–Ω —Ö–∞–∞–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç –±”©–≥–ª”©—Ö –±–æ–ª–æ–º–∂—Ç–æ–π</p>
                <button
                  onClick={() => setShowQuestionnaire(true)}
                  className="bg-[#0C213A] text-white px-6 py-3 rounded-lg hover:bg-[#0C213A]/90 transition-colors"
                >
                  –ê–Ω–∫–µ—Ç –±”©–≥–ª”©—Ö
                </button>
              </div>
            ) : (
              <GovernmentEmployeeQuestionnaire
                onSubmit={(data) => {
                  console.log('Questionnaire submitted:', data);
                  setShowQuestionnaire(false);
                  alert('–ê–Ω–∫–µ—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!');
                }}
                onCancel={() => setShowQuestionnaire(false)}
              />
            )}
          </div>
        </div>
      )}

      {activeTab === "responses" && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-[#0C213A]">–ê—Å—É—É–ª–≥—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥</h3>
            <p className="text-sm text-gray-600 mt-1">–ò–ª–≥—ç—ç—Å—ç–Ω –∞—Å—É—É–ª–≥—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ —Ö—è–Ω–∞—Ö</p>
          </div>
          <div className="p-6">
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h4 className="text-lg font-medium text-[#0C213A] mb-2">–ê—Å—É—É–ª–≥—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥</h4>
              <p className="text-gray-600 mb-6">–ò–ª–≥—ç—ç—Å—ç–Ω –∞—Å—É—É–ª–≥—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ —Ö—è–Ω–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π</p>
              <Link
                href="/employer/questionnaires/responses"
                className="bg-[#0C213A] text-white px-6 py-3 rounded-lg hover:bg-[#0C213A]/90 transition-colors inline-block"
              >
                –•–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ —Ö–∞—Ä–∞—Ö
              </Link>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}